# Autogenerated from a Treetop grammar. Edits may be lost.


module Aphorism
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        node_cache[:expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_arithmetic
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_sub_expression
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_equality
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_basic_expression
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module SubExpression0
    def expression
      elements[1]
    end

  end

  module SubExpression1
    def value(ctx:)
      expression.value(ctx: ctx)
    end
  end

  def _nt_sub_expression
    start_index = index
    if node_cache[:sub_expression].has_key?(index)
      cached = node_cache[:sub_expression][index]
      if cached
        node_cache[:sub_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('(', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_expression
      s0 << r2
      if r2
        if (match_len = has_terminal?(')', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\')\'')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SubExpression0)
      r0.extend(SubExpression1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sub_expression][start_index] = r0

    r0
  end

  def _nt_basic_expression
    start_index = index
    if node_cache[:basic_expression].has_key?(index)
      cached = node_cache[:basic_expression][index]
      if cached
        node_cache[:basic_expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_sub_expression
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_symbol
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_literals
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:basic_expression][start_index] = r0

    r0
  end

  def _nt_literals
    start_index = index
    if node_cache[:literals].has_key?(index)
      cached = node_cache[:literals][index]
      if cached
        node_cache[:literals][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_nil_literal
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_boolean_literal
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_string_literal
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_range_literal
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_numeric_literal
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:literals][start_index] = r0

    r0
  end

  module Arithmetic0
    def lhs
      elements[0]
    end

    def space1
      elements[1]
    end

    def operator
      elements[2]
    end

    def space2
      elements[3]
    end

    def rhs
      elements[4]
    end
  end

  module Arithmetic1
    def value(ctx:)
      case operator.text_value
        when '+'
          lhs.value(ctx: ctx) + rhs.value(ctx: ctx)
        when '-'
          lhs.value(ctx: ctx) - rhs.value(ctx: ctx)
      end
    end
  end

  def _nt_arithmetic
    start_index = index
    if node_cache[:arithmetic].has_key?(index)
      cached = node_cache[:arithmetic][index]
      if cached
        node_cache[:arithmetic][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_basic_expression
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_sub_expression
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        i5 = index
        if (match_len = has_terminal?('+', false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure('\'+\'')
          r6 = nil
        end
        if r6
          r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
          r5 = r6
        else
          if (match_len = has_terminal?('-', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\'-\'')
            r7 = nil
          end
          if r7
            r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
            r5 = r7
          else
            @index = i5
            r5 = nil
          end
        end
        s0 << r5
        if r5
          r8 = _nt_space
          s0 << r8
          if r8
            r9 = _nt_expression
            s0 << r9
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Arithmetic0)
      r0.extend(Arithmetic1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:arithmetic][start_index] = r0

    r0
  end

  module Equality0
    def lhs
      elements[0]
    end

    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def rhs
      elements[4]
    end
  end

  module Equality1
    def value(ctx:)
      return lhs.value(ctx: ctx) == rhs.value(ctx: ctx)
    end
  end

  def _nt_equality
    start_index = index
    if node_cache[:equality].has_key?(index)
      cached = node_cache[:equality][index]
      if cached
        node_cache[:equality][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_basic_expression
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if (match_len = has_terminal?('==', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'==\'')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_expression
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Equality0)
      r0.extend(Equality1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:equality][start_index] = r0

    r0
  end

  module StringLiteral0
  end

  module StringLiteral1
    def string
      elements[1]
    end

  end

  module StringLiteral2
    def value(ctx:)
      string.text_value
    end
  end

  def _nt_string_literal
    start_index = index
    if node_cache[:string_literal].has_key?(index)
      cached = node_cache[:string_literal][index]
      if cached
        node_cache[:string_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'"\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if (match_len = has_terminal?('"', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r5 = nil
        end
        if r5
          @index = i4
          r4 = nil
          terminal_parse_failure('\'"\'', true)
        else
          @terminal_failures.pop
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = true
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(StringLiteral0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StringLiteral1)
      r0.extend(StringLiteral2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string_literal][start_index] = r0

    r0
  end

  module NumericLiteral0
  end

  module NumericLiteral1
  end

  module NumericLiteral2
    def numeric
      elements[0]
    end
  end

  module NumericLiteral3
    def value(ctx:)
      numeric.text_value.to_f
    end
  end

  def _nt_numeric_literal
    start_index = index
    if node_cache[:numeric_literal].has_key?(index)
      cached = node_cache[:numeric_literal][index]
      if cached
        node_cache[:numeric_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1, s1 = index, []
    if (match_len = has_terminal?('-', false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      s4, i4 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r5 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s1 << r4
      if r4
        i7, s7 = index, []
        if (match_len = has_terminal?('.', false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r8 = nil
        end
        s7 << r8
        if r8
          s9, i9 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r10 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r10 = nil
            end
            if r10
              s9 << r10
            else
              break
            end
          end
          if s9.empty?
            @index = i9
            r9 = nil
          else
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          end
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(NumericLiteral0)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r6
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(NumericLiteral1)
    else
      @index = i1
      r1 = nil
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(NumericLiteral,input, i0...index, s0)
      r0.extend(NumericLiteral2)
      r0.extend(NumericLiteral3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_literal][start_index] = r0

    r0
  end

  module BooleanLiteral0
    def boolean
      elements[0]
    end
  end

  module BooleanLiteral1
    def value(ctx:)
      boolean.text_value == "true"
    end
  end

  def _nt_boolean_literal
    start_index = index
    if node_cache[:boolean_literal].has_key?(index)
      cached = node_cache[:boolean_literal][index]
      if cached
        node_cache[:boolean_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if (match_len = has_terminal?("true", false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"true"')
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      if (match_len = has_terminal?("false", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"false"')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(BooleanLiteral,input, i0...index, s0)
      r0.extend(BooleanLiteral0)
      r0.extend(BooleanLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boolean_literal][start_index] = r0

    r0
  end

  module NilLiteral0
    def nil
      elements[0]
    end
  end

  module NilLiteral1
    def value(ctx:)
      nil
    end
  end

  def _nt_nil_literal
    start_index = index
    if node_cache[:nil_literal].has_key?(index)
      cached = node_cache[:nil_literal][index]
      if cached
        node_cache[:nil_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if (match_len = has_terminal?('nil', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'nil\'')
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      if (match_len = has_terminal?('null', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'null\'')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(NilLiteral,input, i0...index, s0)
      r0.extend(NilLiteral0)
      r0.extend(NilLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:nil_literal][start_index] = r0

    r0
  end

  module RangeLiteral0
    def start
      elements[0]
    end

    def operator
      elements[1]
    end

    def ending
      elements[2]
    end
  end

  module RangeLiteral1
    def value(ctx:)
      Range.new(start.text_value.to_i, ending.text_value.to_i)
    end
  end

  def _nt_range_literal
    start_index = index
    if node_cache[:range_literal].has_key?(index)
      cached = node_cache[:range_literal][index]
      if cached
        node_cache[:range_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_numeric_literal
    s0 << r1
    if r1
      if (match_len = has_terminal?('..', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'..\'')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_numeric_literal
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(RangeLiteral,input, i0...index, s0)
      r0.extend(RangeLiteral0)
      r0.extend(RangeLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:range_literal][start_index] = r0

    r0
  end

  module Symbol0
  end

  module Symbol1
  end

  module Symbol2
    def root
      elements[1]
    end

    def path
      elements[2]
    end
  end

  module Symbol3
    def value(ctx:)
      ctx.get(identifier: root.text_value, path: path.elements)
    end
  end

  def _nt_symbol
    start_index = index
    if node_cache[:symbol].has_key?(index)
      cached = node_cache[:symbol][index]
      if cached
        node_cache[:symbol][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('$', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'$\'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2, s2 = index, []
      if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z]')
        r3 = nil
      end
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[a-zA-Z0-9_]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Symbol0)
      else
        @index = i2
        r2 = nil
      end
      s0 << r2
      if r2
        s6, i6 = [], index
        loop do
          i7, s7 = index, []
          if (match_len = has_terminal?('.', false, index))
            r8 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r8 = nil
          end
          s7 << r8
          if r8
            s9, i9 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                r10 = true
                @index += 1
              else
                terminal_parse_failure('[a-zA-Z0-9_]')
                r10 = nil
              end
              if r10
                s9 << r10
              else
                break
              end
            end
            if s9.empty?
              @index = i9
              r9 = nil
            else
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            end
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(Symbol1)
          else
            @index = i7
            r7 = nil
          end
          if r7
            s6 << r7
          else
            break
          end
        end
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Symbol2)
      r0.extend(Symbol3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:symbol][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[ \\t\\n\\r]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[ \\t\\n\\r]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:space][start_index] = r0

    r0
  end

end

class AphorismParser < Treetop::Runtime::CompiledParser
  include Aphorism
end

